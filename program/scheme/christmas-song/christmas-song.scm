(define (print-song)

  (define (get-index-string num case)
    (define print-list '(
                         (1 . "partiridge in a pear tree")
                         (2 . "turtle doves")
                         (3 . "French hens")
                         (4 . "calling birds")
                         (5 . "golden rings")
                         (6 . "gees a-laying")
                         (7 . "swans a swimming")
                         (8 . "maids a-milking")
                         (9 . "ladies dancing")
                         (10 . "lords a-leaping")
                         (11 . "pipers piping")
                         (12 . "drummers drumming")
                         (13 . "")
                         ))


    (define num-list
      '((1 . "a")
        (2 . "two")
        (3 . "three")
        (4 . "four")
        (5 . "five")
        (6 . "six")
        (7 . "seven")
        (8 . "eight")
        (9 . "nine")
        (10 . "ten")
        (11 . "eleven")
        (12 . "twelve")
        (13 . "")
        )
      )
    (define num-list-st
      '((1 . "first")
        (2 . "second")
        (3 . "third")
        (4 . "fourth")
        (5 . "fifth")
        (6 . "sixth")
        (7 . "seventh")
        (8 . "eighth")
        (9 . "ninth")
        (10 . "tenth")
        (11 . "eleventh")
        (12 . "twelfth")
        (13 . "")
        )
      )
    (define (iter num p-list v)
      (cond ((null? p-list) v)
            (else
             (let ((s (car p-list)))
               (if (eq? num (car s))
                   (iter num (cdr p-list) (cdr s))
                   (iter num (cdr p-list) v))
               )
             ))
      )
    (cond ((eq? case 'st) (iter num num-list-st '()))
          ((eq? case 'gift) (iter num print-list '()))
          (else (iter num num-list '())))
    )

  (define (make-header num)
    (string-append "On the " (get-index-string num 'st) " day of Christmas my true love gave to me ")
    )

  (define (make-one-gift num)
    (string-append (get-index-string num 'no-st) " " (get-index-string num 'gift) )
    )

  (define (get-sep num)
    (cond ((eq? num 2) " and ")
          ((eq? num 1) "")
          (else ", "))
    )


  (define (print-iter num header body)
    (if (> num 13)
        ""
        (begin
          (display (string-append header body))
          (newline)
          (print-iter (+ 1 num) (make-header num) (string-append (make-one-gift num) (get-sep num) body)

                      )))
    )
  (print-iter 1 "" "")
  )

(print-song )
